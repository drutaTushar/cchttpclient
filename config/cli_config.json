{
  "http_timeout": 30,
  "secrets": {
    "supabase_api_key": {
      "type": "env",
      "env": "SUPABASE_API_KEY"
    },
    "supabase_project_id": {
      "type": "value",
      "value": "your-project-id"
    },
    "s3_default_bucket": {
      "type": "env",
      "env": "S3_BUCKET",
      "encoding": "utf-8"
    }
  },
  "commands": [
    {
      "name": "storage",
      "help": "Interact with storage providers",
      "subcommands": [
        {
          "name": "list",
          "help": "List objects inside a bucket",
          "prepare_code": "def prepare(request, helpers):\n    headers = request.get(\"headers\", {})\n    headers.setdefault(\"Authorization\", f\"Bearer {helpers.secret('supabase_api_key')}\")\n    headers.setdefault(\"X-Project-Id\", helpers.secret(\"supabase_project_id\"))\n    request[\"headers\"] = headers\n    params = request.get(\"params\", {})\n    if not params.get(\"prefix\"):\n        params[\"prefix\"] = helpers.env(\"DEFAULT_STORAGE_PREFIX\", \"\")\n    request[\"params\"] = params\n    return request",
          "response_code": "def process_response(response, helpers):\n    objects = response.get(\"objects\", []) if isinstance(response, dict) else []\n    return {\n        \"count\": len(objects),\n        \"objects\": objects,\n    }",
          "arguments": [
            {
              "name": "bucket",
              "help": "Bucket name",
              "param_type": "argument",
              "type": "str",
              "required": true,
              "location": "path",
              "target": "bucket"
            },
            {
              "name": "prefix",
              "help": "Optional prefix filter",
              "param_type": "option",
              "cli_name": "--prefix",
              "type": "str",
              "required": false,
              "location": "query",
              "target": "prefix"
            }
          ],
          "request": {
            "method": "GET",
            "url": "https://api.example.com/storage/{bucket}/objects",
            "headers": {
              "Accept": "application/json"
            },
            "query": {},
            "body": {
              "mode": "json",
              "template": {}
            },
            "response": {
              "mode": "json",
              "success_codes": [
                200
              ]
            }
          }
        }
      ]
    },
    {
      "name": "database",
      "help": "Supabase-like operations",
      "subcommands": [
        {
          "name": "query",
          "help": "Run an SQL statement",
          "prepare_code": "def prepare(request, helpers):\n    headers = request.get(\"headers\", {})\n    headers.setdefault(\"apikey\", helpers.secret(\"supabase_api_key\"))\n    headers.setdefault(\"Authorization\", f\"Bearer {helpers.secret('supabase_api_key')}\")\n    headers.setdefault(\"X-Client-Info\", \"dynamic-cli/1.0\")\n    request[\"headers\"] = headers\n    body = request.get(\"json\", {})\n    body.setdefault(\"project_id\", helpers.secret(\"supabase_project_id\"))\n    body.setdefault(\"role\", helpers.env(\"SUPABASE_ROLE\", \"service_role\"))\n    request[\"json\"] = body\n    return request",
          "response_code": "def process_response(response, helpers):\n    if isinstance(response, dict) and \"data\" in response:\n        return response[\"data\"]\n    return response",
          "arguments": [
            {
              "name": "sql",
              "help": "SQL query string",
              "param_type": "argument",
              "type": "str",
              "required": true,
              "location": "json",
              "target": "query"
            },
            {
              "name": "schema",
              "help": "Database schema",
              "param_type": "option",
              "cli_name": "--schema",
              "type": "str",
              "required": false,
              "default": "public",
              "location": "json",
              "target": "schema"
            }
          ],
          "request": {
            "method": "POST",
            "url": "https://api.example.com/database/query",
            "headers": {
              "Content-Type": "application/json",
              "Accept": "application/json"
            },
            "query": {},
            "body": {
              "mode": "json",
              "template": {}
            },
            "response": {
              "mode": "json",
              "success_codes": [
                200,
                201
              ]
            }
          }
        }
      ]
    },
    {
      "name": "test",
      "help": "Simple test commands",
      "subcommands": [
        {
          "name": "echo",
          "help": "Echo back the provided message",
          "prepare_code": "def prepare(request, helpers):\n    return None  # Skip HTTP request for test command",
          "response_code": "def process_response(response, helpers):\n    return {\n        \"echo\": \"Test command executed successfully\",\n        \"timestamp\": helpers.env(\"TEST_TIMESTAMP\", \"now\"),\n        \"status\": \"success\"\n    }",
          "arguments": [
            {
              "name": "message",
              "help": "Message to echo back",
              "param_type": "argument",
              "type": "str",
              "required": true,
              "location": "json",
              "target": "message"
            }
          ],
          "request": {
            "method": "POST",
            "url": "http://httpbin.org/post",
            "headers": {
              "Content-Type": "application/json"
            },
            "query": {},
            "body": {
              "mode": "json",
              "template": {}
            },
            "response": {
              "mode": "json",
              "success_codes": [
                200
              ]
            }
          }
        }
      ]
    },
    {
      "name": "jp",
      "help": "jp commands",
      "subcommands": [
        {
          "name": "users",
          "help": "Load users from jsonplaceholder. Simple placeholder api to load random users",
          "prepare_code": "def prepare(request, helpers):\n    request['method'] = 'GET'\n    request['url'] = 'https://jsonplaceholder.typicode.com/users'\n    return request\n",
          "response_code": "def process_response(response, helpers):\n    users = helpers.json(response)\n    formatted_users = [{'name': user['name'], 'email': user['email']} for user in users]\n    return formatted_users",
          "arguments": [],
          "request": {
            "method": "GET",
            "url": "https://jsonplaceholder.typicode.com/users",
            "headers": {},
            "query": {},
            "body": {
              "mode": "json",
              "template": {}
            },
            "response": {
              "mode": "json",
              "success_codes": [
                200
              ]
            }
          }
        }
      ]
    }
  ],
  "mcp": {
    "embedding_model": "text-embedding-3-small",
    "persist_path": "embeddings.sqlite",
    "api_key_env": "OPENAI_API_KEY",
    "api_base": null,
    "collection_name": "command_descriptions",
    "top_k": 3
  }
}